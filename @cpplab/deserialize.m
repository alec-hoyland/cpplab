%{ 
                   _       _     
  ___  _     _    | | __ _| |__  
 / __|| |_ _| |_  | |/ _` | '_ \ 
| (_|_   _|_   _| | | (_| | |_) |
 \___||_|   |_|   |_|\__,_|_.__/ 


## deserialize

**Syntax**

```
C.deserialize(V)
```

**Description**

`C.deserialize(V)` updates all parameters in a cpplab object, including any child objects it may contain, using the vector V. V must be a vector containing doubles of the right size. An easy way to determine the correct size of `V` is to use `C.serialize()` first. 

`deserialize` is used to update all the values of your cpplab object using a vector, typically generated by `C.serialize()`

!!! See Also
    ->cpplab.serialize

%}


function deserialize(self,state)

props = sort(properties(self));

persistent pstate;
if nargin == 2
	pstate = state;
end

for i = 1:length(props)

	% check if it's hidden or should be otherwise ignored
	if strcmp(props{i},'hidden_props')
		continue
	end
	if any(strfind(props{i},'cpp_'))
		continue
	end

	if any(strcmp(props{i},self.hidden_props))
		continue
	end

	if length(self.(props{i})) > 1 && isa(self.(props{i}),'cpplab')
		% vector of cpplab objects 
		for j = 1:length(self.(props{i}))
			self.(props{i})(j).deserialize();
		end
	elseif isa(self.(props{i}),'double') && ~isempty(self.(props{i}))
		if ~isscalar(self.(props{i}))
			continue
		end
		self.(props{i}) = pstate(1);
		pstate(1) = [];
	elseif isa(self.(props{i}),'function_handle') 
		% skip
		pstate(1) = [];
	elseif  isa(self.(props{i}),'cpplab')
		self.(props{i}).deserialize();
	end

end	